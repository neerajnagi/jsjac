@model ChatJsMvcSample.Models.ViewModels.ChatViewModel

<!DOCTYPE html>
<html>
<head>
    <title>ChatJS - Facebook style chat for your Web App</title>
    <!--Scripts-->
    <script src="/Scripts/jquery-1.8.1.min.js" type="text/javascript"></script>
    <script src="/Bootstrap/js/bootstrap.min.js" type="text/javascript"></script>

    <!-- IF SignalR -->
    <script src="/Scripts/jquery.signalR-1.1.2.min.js"></script>
    <script src="/signalr/hubs" type="text/javascript"></script>
    <script src="/ChatJs/Scripts/jquery.chatjs.signalradapter.js" type="text/javascript"></script>
    <!-- ENDIF -->

    <!-- IF LongPolling -->
    <!-- <script src="/ChatJs/Scripts/jquery.chatjs.longpollingadapter.js" type="text/javascript"></script> -->
    <!-- ENDIF -->

    <!-- ChatJS and dependencies -->
    <script src="/ChatJs/Scripts/jquery.autosize.min.js" type="text/javascript"></script>
    <script src="/ChatJs/Scripts/jquery.activity-indicator-1.0.0.min.js" type="text/javascript"></script>
    <script src="/ChatJs/Scripts/jquery.chatjs.js" type="text/javascript"></script>

    <script src="/Scripts/scripts.js" type="text/javascript"></script>
    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js"></script>
    <!--Styles-->
    <link rel="stylesheet" type="text/css" href="/Content/Styles/styles.css" />
    <link rel="stylesheet" type="text/css" href="/ChatJs/Styles/jquery.chatjs.css" />
    <link rel="stylesheet" type="text/css" href="/Bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="/Bootstrap/css/bootstrap-responsive.min.css" />
    <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-41028546-1', 'chatjs.net');
        ga('send', 'pageview');

    </script>
    @if (this.Model != null && this.Model.IsUserAuthenticated)
    {
        <script type="text/javascript">
            $(function () {
                $.chat({
                    // your user information
                    user: {
                        Id: @this.Model.UserId,
                        Name: '@this.Model.UserName',
                        ProfilePictureUrl: '@Html.Raw(this.Model.UserProfilePictureUrl)'
                    },
                    // text displayed when the other user is typing
                    typingText: ' is typing...',
                    // the title for the user's list window
                    titleText: 'Chat',
                    // text displayed when there's no other users in the room
                    emptyRoomText: "There's no one around here. You can still open a session in another browser and chat with yourself :)",
                    // the adapter you are using
                    adapter: new SignalRAdapter() // new LongPollingAdapter()
                });
            });
        </script>
    }
</head>
<body>
    <div class="hero">
        <div class="test"></div>
        <div class="container">
            <div class="hero-text">
                <img src="/Content/Images/logo.png" />
                <div class="version"><a href="#">ver. 1.1</a></div>
                <h1>Embed instant messaging into your Web App!</h1>
                <p class="info">
                    ChatJS is a full-featured, lightweight, Facebook style jQuery plugin for instant messaging. ChatJS also comes with a server side implementation
                        for ASP.NET/SignalR out of the box.
                </p>
                <a class="btn btn-primary btn-large" href="https://github.com/andrerpena/chatjs/archive/chatjs-main.zip"><i class="icon-white icon-download-alt" style="margin-right: 10px; margin-top: 4px;"></i>Download</a>
                @if (this.Model != null && this.Model.IsUserAuthenticated)
                {
                    <a id="leaveChatButton" href="#" class="btn btn-warning btn-large">Leave demo chat</a>                    
                }
                else
                {
                    <a id="joinChatButton" href="#" class="btn btn-info btn-large">Join public demo chat</a>
                    <img class="callout" src="/Content/Images/callout.png" />
                }
                <p class="github">
                    ... or visit the <a href="https://github.com/andrerpena/chatjs">project at GitHub</a>.
                </p>
            </div>
            <div class="screenshot-wrapper">
                <img src="/Content/Images/screenshot.png" />
            </div>
        </div>
    </div>
    <div class="container">
        <div class="row">

            <div class="span6">
                <h4>How it works:
                </h4>
                <p>
                    The client part is divided in two JavaScript files.
                    The file <a href="https://github.com/andrerpena/chatjs/blob/chatjs-main/ChatJs/Scripts/jquery.chatjs.js">jquery.chatjs.js</a> contains the main jQuery plugin. This file is completely
                    independent of the server implementation. In order to implement the interface between <a href="https://github.com/andrerpena/chatjs/blob/chatjs-main/ChatJs/Scripts/jquery.chatjs.js">jquery.chatjs.js</a> and 
                    the server, you need and adapter. ChatJS comes with two adapter implementations. The first one, <a href="https://github.com/andrerpena/chatjs/blob/chatjs-main/ChatJs/Scripts/jquery.chatjs.signalradapter.js">jquery.chatjs.signalradapter.js</a>, is meant to be used with ASP.NET and <a href="http://www.asp.net/signalr">SignalR</a>.
                    This is the preferable way for working with ASP.NET. The second one is <a href="https://github.com/andrerpena/chatjs/blob/chatjs-main/ChatJs/Scripts/jquery.chatjs.longpollingadapter.js">jquery.chatjs.longpollingadapter.js</a>
                    which is the generic client-side implementation. This adapter can work with whatever server-side implementation you use, like PHP, Java or NodeJS, as long as the proper end-points are implemented.
                </p>
                <p>Once the server is set up, the client code is quite simple. These are all the options:</p>
                <pre class="prettyprint ">
$.chat({
    // your user information
    user: {
        Id: 3,
        Name: 'John Silver',
        ProfilePictureUrl: 'http://www.foo.com/avatar/123'
    },
    // text displayed when the other user is typing
    typingText: ' is typing...',
    // the title for the user's list window
    titleText: 'ChatJS demo chat',
    // text displayed when there's no other users in the room
    emptyRoomText: "There's no one around here.",
    // the adapter you are using. There are 2 implementations out of the box:
    // SignalRAdapter and LongPollingAdapter (server independent).
    adapter: new SignalRAdapter()
});
</pre>
            </div>
            <div class="span6">
                <h4>Features:</h4>
                <ul class="green-checks">
                    <li>Real time message sharing.</li>
                    <li>Automatically parses URLs and emoticons <span class="happy"></span>.</li>
                    <li>Automatically remembers opened windows across diferent requests (through cookies).</li>
                    <li>Triggers a sound notification when the user receives a message.</li>
                    <li>Indicates when the other user is typing.</li>
                    <li>Supports user online and offline status. </li>
                    <li>Supports multiple chat rooms. If you have a multi-tenancy app you can create a room for each tenancy, for instance.</li>
                    <li>Supports multiple browser windows opened with the same session. They all get properly sinchronized.</li>
                    <li>Customizable texts. You can easily translate it to your language.</li>
                    <li>ChatJS comes with a sample server implementation for ASP.NET that supports both the SignalR and the long-polling adapter.</li>
                </ul>
                <h4>License:</h4>
                <p>
                    ChatJS v1.1 is free under the <a href="http://www.tldrlegal.com/license/mit-license">MIT license</a>.
                </p>
            </div>
        </div>
        <div class="row">
            <div class="span12">
                <h3>How to get ChatJS up and running in your environment</h3>
                <p>
                    The first thing to do is to determine which adapter you want to use. The adapter is the piece of code that will determine how the client will communicate to the server.
                    ChatJS comes with two adapters and an ASP.NET sample that supports both. If you are working with ASP.NET, it's highly recommended that you use <a href="http://signalr.net/">SignalR</a>.
                    ASP.NET SignalR is a new library for ASP.NET developers that makes it incredibly simple to add real-time web functionality to your applications. Basically you have a "permanent" client-server connection
                    that allows you to call client JavaScript funtions from the server. If you are not using ASP.NET or you can't use SignalR for some reason, long polling is the way to go.
                    With <a href="http://en.wikipedia.org/wiki/Push_technology#Long_polling">long polling</a>, the client requests information from the server in a way similar to a normal polling; however,
                    if the server does not have any information available for the client, then instead of sending an empty response, the server holds the request and waits for information to become available (or for a suitable timeout event),
                    after which a complete response is finally sent to the client. Long polling allows you to send data from the server to the client almost in real time.
                </p>
                <p>
                    To get up and running, chose your adapter and continue reading the documentation:
                    <ul>
                        <li><a href="https://github.com/andrerpena/chatjs/wiki/Getting-up-and-running-with-SignalR">Getting started with the SignalR adapter.</a></li>
                        <li><a href="https://github.com/andrerpena/chatjs/wiki/Getting-up-and-running-with-long-polling">Getting started with the long-polling adapter.</a></li>
                    </ul>
                </p>
            </div>
        </div>
        <div class="row">
            <div class="span12">
                <h3>About the author</h3>
                <p>
                    Hello everyone, my name is André Pena. I'm a .NET developer from Brazil. I hope you will enjoy ChatJS as much as I enjoy developing it. If you have any problems, you can post a <a href="https://github.com/andrerpena/chatjs/issues">GitHub issue</a>.
                    if you have a suggestion for ChatJS, or if you want to hire me to help integrating ChatJS into your application, contact me at <a href="mailto:andrerpena@gmail.com">andrerpena@gmail.com</a>.
                </p>
            </div>
        </div>

        <div class="row">
            <div class="span12">
                <h3>License:</h3>
                <p>
                    ChatJS v1.1 is free under the <a href="http://www.tldrlegal.com/license/mit-license">MIT license</a>.
                </p>
            </div>
        </div>
        <div class="row">
            <div class="span12">
                <h3>Third Party:</h3>
                <p>
                    ChatJS uses emoticons freely provided by <a href="http://www.softicons.com/free-icons/designers/aha-soft">Aha</a> at <a href="http://www.softicons.com/">www.softicons.com</a>. Emoticons license: <a href="http://creativecommons.org/licenses/by/3.0/us/">Creative Commons Attribution 3.0</a>
                    . You can easily replace the emiticons by those which better fits your needs. Activity Indicators by <a href="https://github.com/neteye/jquery-plugins/">NETEYE</a>.
                </p>
                <p>
                </p>
            </div>
        </div>
    </div>



    <!-- Modal -->
    <div id="loginModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h3 id="myModalLabel">Join demo chat</h3>
        </div>
        <div class="modal-body">
            <p>You are joining the demo chat. There's no need to register, just pass in some information so we can display in the chat window. The e-mail is just so that we can display your picture. It won't be stored.</p>
            <form class="form-horizontal">
                <div class="control-group">
                    <label class="control-label" for="userName">User Display Name</label>
                    <div class="controls">
                        <input type="text" id="userName" placeholder="The way other users will see you." class="input-xlarge">
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="email">E-mail</label>
                    <div class="controls">
                        <input type="text" id="email" placeholder="For Gravatar use only. Will not be stored." class="input-xlarge">
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button id="joinChatConclusionButton" class="btn btn-primary" type="button">Join chat</button>
            <button class="btn" data-dismiss="modal" aria-hidden="true">Cancel</button>
        </div>
    </div>

    <footer><a href="https://github.com/andrerpena/chatjs/wiki/FAQ">ChatJS FAQ</a> - <a href="http://andrerpena.net">My Blog</a> - &copy;2013 All rights reserved.</footer>
</body>
</html>
